{#
 #  First create a dict holding the entire zone information and create a hash
 #  from it, that it can be compared with subsequent task executions. In this
 #  way the serial will only be updated if there are some content changes.
 #}
{% set _zone_data = {} %}
{% set _ = _zone_data.update({'ttl': bind_zone_ttl}) %}
{% set _ = _zone_data.update({'domain': item.0.name}) %}
{% set _ = _zone_data.update({'mname': item.0.name_servers|default([])}) %}
{% set _ = _zone_data.update({'aname': item.0.other_name_servers|default([])}) %}
{% if item.0.hostmaster_email is defined %}
{% set _ = _zone_data.update({'rname': (( item.0.hostmaster_email )) + ('' if (item.0.hostmaster_email is search('\.')) else ('.' + _zone_data['domain']))}) %}
{% else %}
{% set _ = _zone_data.update({'rname': 'hostmaster.' + _zone_data['domain']}) %}
{% endif %}
{% set _ = _zone_data.update({'refresh': bind_zone_time_to_refresh}) %}
{% set _ = _zone_data.update({'retry': bind_zone_time_to_retry}) %}
{% set _ = _zone_data.update({'expire': bind_zone_time_to_expire}) %}
{% set _ = _zone_data.update({'minimum': bind_zone_minimum_ttl}) %}
{% set _ = _zone_data.update({'hosts': item.0.hosts|default([]) | selectattr('ip', 'defined') | selectattr('ip', 'string') | selectattr('ip', 'search', '^'+item.1) | list}) %}
{% set _ = _zone_data.update({'revip': ('.'.join(item.1.replace(item.1+'.','',1).split('.')[::-1]))}) %}
{#
 #  Compare the zone file hash with the current zone data hash and set serial
 #  accordingly
 #}
{% set _zone = {'hash': _zone_data | string | hash('md5')} %}
{% for _result in hashes_internal if _result.name == item.1 %}
{%   set _hash_serial = _result.hash.split(' ')[2:] %}
{%   if _hash_serial and _hash_serial[0] == _zone['hash'] %}
{%     set _ = _zone.update({'serial': _hash_serial[1]}) %}
{%   else %}
{%     set _ = _zone.update({'serial': timestamp.stdout}) %}
{%   endif %}
{% endfor %}
{% set _ = _zone.update({'serial': timestamp.stdout}) if 'serial' not in _zone %}
{#
 #  Eventually output the zone data
 #}
; Hash: {{ _zone['hash'] }} {{ _zone['serial'] }}
; Reverse zone file {{ item.1 }}
{{ ansible_managed | comment(decoration='; ') }}

$TTL {{ _zone_data['ttl'] }}
$ORIGIN {{ ('.'.join(item.1.replace(item.1+'.','',1).split('.')[::-1])) }}.in-addr.arpa.

@ IN SOA {{ _zone_data['mname']|first }} {{ _zone_data['rname'] }} (
  {{ _zone['serial'] }}
  {{ _zone_data['refresh'] }}
  {{ _zone_data['retry'] }}
  {{ _zone_data['expire'] }}
  {{ _zone_data['minimum'] }} )

{% for ns in _zone_data['mname'] %}
                       IN  NS   {{ ns }}
{% endfor %}

{% for host in _zone_data['hosts'] %}
{% if host.ip is string and host.ip.startswith(item.1) %}
{{ ('.'.join(host.ip.replace(item.1+'.','',1).split('.')[::-1])).ljust(16) }}{{ (host.ttl|string).rjust(6) if host.ttl is defined else ''.ljust(6) }} IN  PTR  {{ host.name }}
{% endif %}
{% endfor %}

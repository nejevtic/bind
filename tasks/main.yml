---

# Initialise distribution-specific variables
- name: Source specific variables
  include_vars: "{{ ansible_os_family }}.yml"
  tags: always

- name: Check whether `bind_zone_master_server_ip` was set
  assert:
    that: bind_zone_master_server_ip is defined
  tags: always

- name: Install BIND
  package:
    pkg: "{{ item }}"
    state: present
  with_items:
    - "{{ bind_packages }}"
  when: zone_entries_only is not defined
  tags: install

- name: Ensure runtime directories referenced in config exist
  file:
    path: "{{ item }}"
    state: directory
    owner: root
    group: "{{ bind_group }}"
    mode: 0770
  with_items:
    - "{{ bind_dir }}/dynamic"
    - "{{ bind_dir }}/data"
    - "{{ bind_zone_dir }}"
    - "{{ bind_zone_dir_external }}"
    - "{{ bind_zone_dir_internal }}"
    - "{{ bind_keys_dir }}"
  tags: install

- name: Create serial, based on UTC UNIX time
  command: date -u +%s
  register: timestamp
  changed_when: false
  run_once: true
  check_mode: false
  tags: always

- name: Read zone hashes for external zones
  shell:
    cmd: 'grep -s "^; Hash:" * | sed -e "s/.in-addr.arpa//"'
    chdir: "{{ bind_zone_dir_external }}"
  changed_when: false
  check_mode: false
  register: hashes_external_temp
  tags: always

- name: Read zone hashes for internal zones
  shell:
    cmd: 'grep -s "^; Hash:" * | sed -e "s/.in-addr.arpa//"'
    chdir: "{{ bind_zone_dir_internal }}"
  changed_when: false
  check_mode: false
  register: hashes_internal_temp
  tags: always

- name: Create dict of hashes for internal zones
  set_fact:
    hashes_external: "{{ hashes_external_temp.stdout_lines | parse_hashes }}"
    hashes_internal: "{{ hashes_internal_temp.stdout_lines | parse_hashes }}"
  tags: always

- name: Compile unique set of networks
  set_fact:
    bind_networks_external: "{{ ( bind_zone_domains_external + bind_zone_domains ) | json_query(query) | flatten | unique }}"
    bind_networks_internal: "{{ ( bind_zone_domains_internal + bind_zone_domains ) | json_query(query) | flatten | unique }}"
  vars:
    query: "[*].networks"
  tags: always

- name: Set up the machine as a master DNS server
  include_tasks: master.yml
  when: bind_zone_master_server_ip in ansible_all_ipv4_addresses
  tags: always

- name: Set up the machine as a slave DNS server
  include_tasks: slave.yml
  when: bind_zone_master_server_ip not in ansible_all_ipv4_addresses
  tags: always

- name: Start BIND service
  service:
    name: "{{ bind_service }}"
    state: started
    enabled: true
